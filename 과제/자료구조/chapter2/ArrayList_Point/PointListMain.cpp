#include <stdio.h>
#include <stdlib.h>
#include "ArrayList.h"
#include "Point.h"
#include<crtdbg.h>
int main(void)
{
	_CrtSetDbgFlag(_CRTDBG_LEAK_CHECK_DF | _CRTDBG_ALLOC_MEM_DF);
	List list;
	Point compPos;
	Point * ppos;

	ListInit(&list);

	/*** 4개의 데이터 저장 ***/
	ppos = (Point*)malloc(sizeof(Point));
	SetPointPos(ppos, 2, 1);
	LInsert(&list, ppos->xpos, ppos->ypos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPointPos(ppos, 2, 2);
	LInsert(&list, ppos->xpos, ppos->ypos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPointPos(ppos, 3, 1);
	LInsert(&list, ppos->xpos, ppos->ypos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPointPos(ppos, 3, 2);
	LInsert(&list, ppos->xpos, ppos->ypos);

	/*** 저장된 데이터의 출력 ***/
	printf("현재 데이터의 수: %d \n", LCount(&list));

	if (LFirst(&list, &ppos->xpos,&ppos->ypos))
	{
		ShowPointPos(ppos);

		while (LNext(&list, &ppos->xpos, &ppos->ypos))
			ShowPointPos(ppos);
	}
	printf("\n");

	/*** xpos가 2인 모든 데이터 삭제 ***/
	compPos.xpos = 2;
	compPos.ypos = 0;

	if (LFirst(&list, &ppos->xpos, &ppos->ypos))
	{
		if (PointComp(ppos, &compPos) == 1)
		{
			//List에 구조체의 주소값이 저장된 경우
			//주소 값이 동적할당의 결과인경우를 구분해서 메모리 해제하는데는 무리가 있다.
			//소멸할 데이터를 반환하고 메모리를 해제 할 수 있는 기회를 주어야한다.
			//핵심을 주소값을 반환받고 직접 해제하는 코드를 작성하는것이 올바른 것이다.
			LRemove(&list);
		//	free(ppos);
		}

		while (LNext(&list, &ppos->xpos, &ppos->ypos))
		{
			if (PointComp(ppos, &compPos) == 1)
			{
				LRemove(&list);
			//	free(ppos);
			}
		}
	}

	/*** 삭제 후 남은 데이터 전체 출력 ***/
	printf("현재 데이터의 수: %d \n", LCount(&list));

	if (LFirst(&list, &ppos->xpos, &ppos->ypos))
	{
		ShowPointPos(ppos);

		while (LNext(&list, &ppos->xpos, &ppos->ypos))
			ShowPointPos(ppos);
	}
	printf("\n");

	return 0;
}